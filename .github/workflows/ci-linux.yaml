name: Linux CI

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v2.2.0
        with:
            channels: conda-forge
            python-version: ${{ matrix.python-version }}

      - name: Show info about `base` environment
        shell: "bash -l {0}"
        run: |
          conda info
          conda config --show-sources
          conda list --show-channel-urls

      - name: Set up `env`
        shell: "bash -l {0}"
        run: >
          conda create -n env
          c-compiler cxx-compiler
          python=${{matrix.python-version}} wheel pip

      - name: Show info about `env` environment
        shell: "bash -l {0}"
        run: |
          conda list --show-channel-urls -n env

      - name: Install numcodecs
        shell: "bash -l {0}"
        run: |
          conda activate env
          export DISABLE_NUMCODECS_AVX2=""
          python -m pip install -v -e .[test,test_extras,msgpack,zfpy]

      - name: List installed packages
        shell: "bash -l {0}"
        run: |
          conda activate env
          python -m pip list

      - name: Flake8
        shell: "bash -l {0}"
        run: |
          conda activate env
          flake8

      - name: Run tests
        shell: "bash -l {0}"
        run: |
          conda activate env
          pytest -v

      - uses: codecov/codecov-action@v3
        with:
          #token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
            #files: ./coverage1.xml,./coverage2.xml # optional
            #flags: unittests # optional
            #name: codecov-umbrella # optional
            #fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
